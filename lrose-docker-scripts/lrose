#!/bin/bash
my_version=1.01

# Wrapper script to facilitate running lrose commands in a container.
# Bruno Melli 4/7/18
#
# Basically, instead of doing something like this:
# docker run <bunch of docker options> /usr/local/lrose/bin/<cmd> <cmd options>
# You do
# lrose <few options listed below> -- <cmd> <cmd options>
#
# By default, the image is lrose-blaze and the container is lrose-container

print_help() {
    echo "lrose wrapper version $my_version"
    echo "usage: lrose [args] -- command [command args]"
    cat <<EOF

    -a|--argfile <file>		Specify a file that has additional options (default ~/.lroseargs)
    		 		The file has one entry per line with #, =, --, and : serving as keywords
    		 			# denotes a comment
					= Is used to specify an environment variable
					     foo=bar gets translated to -e foo=bar
					: Is used to specify a volume mapping
					     /from:/to gets translated to -v /from:/to
                                       -- Denotes a raw argument
                                             --whatever will be passed as is

    -h|--help			Print help and exit 
    -c|--container <name>	Use this container instead of the default lrose-container 
    -d|--debug			Print debug info 
    -i|--image <name>		Use this image instead of the default lrose-image 
    -n|--no			Don't run the command (useful with -d) 
    -r|--remove			Remove the container when done 
    -v|--volume <from:to>	Add volume mappings. You can have several -v options 
    				    from is your local host absolute path 
				    to is the absolute path inside the container.

    command [command args] is the lrose-blaze command invocation. For example
    	    HawkEye -archive_url /tmp/KHGX -start_time "2017 08 00 00 00" -time_span 7200

EOF
}

# Run a command... or not.

run_cmd() {
    verbose=$1
    shift
    run=$1
    shift
    cmd="$1"
    shift
    if [ "$verbose" -eq 1 ]; then
	echo "cmd: $cmd $@"
    fi

    if [ "$run" -eq 1 ]; then
	result="$($cmd "$@")"
	echo "$result"
    fi
}

# Print a message if debug is set to 1

print_msg() {
    debug=$1
    shift
    if [ "$debug" -eq 1 ]; then
	echo "$@"
    fi
}

# Set the variable whose name was given in $2 to the status of container $1

container_status() {
    local result=$2
    local entry=`docker ps -a --filter "name=$1" --format "{{.ID}}:{{.Status}}"`
    eval $result="'$entry'"
}

# A few default values that can be overwritten on the command line

REMOVE="--rm"
IMAGE=`docker images | grep nsflrose/lrose-blaze | grep latest | awk '{ print $3; }'`
CONTAINER="lrose-container"
ARG_FILE="$HOME/.lroseargs"
VOLUME_ARGS="-v $HOME:$HOME"
ENV_ARGS="-e HOME=$HOME"
RAW_ARGS=""

debug=0
run_flag=1

# Who am I

my_uid=`id -u`
my_gid=`id -g`

# Common docker options

my_os=`uname`
case $my_os in
    Linux)
	DISPLAY_OPT="--env=DISPLAY --env QT_X11_NO_MITSHM=1"
	;;	
    Darwin)
	my_host=`hostname`
	my_ip=`host $my_host`
	my_ip=${my_ip##* }
	DISPLAY_OPT="-e DISPLAY=$my_ip:0"
	xhost +$my_ip > /dev/null
    ;;
    *)
	echo "Unknown OS '$my_os'. I don't know how to set up DISPLAY. Using Linux"
	DISPLAY_OPT="--env=\"DISPLAY\" --env QT_X11_NO_MITSHM=1"
	;;
esac

# Process options

while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
	-a|--argfile)
	    ARG_FILE="$2"
	    shift # past argument
	    shift # past value
	    ;;
	-h|--help)
	    print_help
	    exit 0
	    ;;
	-c|--container)
	    CONTAINER="$2"
	    shift
	    shift
	    ;;
	-d|--debug)
	    debug=1
	    shift
	    ;;
	-i|--image)
	    IMAGE="$2"
	    shift # past argument
	    shift # past value
	    ;;
	-n|--no)
	    run_flag=0
	    shift
	    ;;
	-r|--rm)
	    REMOVE="--rm"
	    shift # past argument
	    ;;
	-v|--volume)
	    VOLUME_ARGS="$VOLUME_ARGS -v $2"
	    shift # past argument
	    shift # past value
	    ;;
	--)
	    shift # past --
	    break
	    ;;
	*)    # unknown option
	    echo "Unknown option '$key' (Did you forget the --)"
	    print_help
	    exit 1
	    ;;
    esac
done

# Whatever is left is the lrose command to run
# Prepend path to lrose bin directory if path is not specified.
# TODO: just add /usr/local/lrose/bin to PATH when building the image?

command=$1
shift
if [[ ! "$command" == *\/* ]]; then
    command="/usr/local/lrose/bin/$command"
fi

# Load user specified options (volumes and environment)

if [[ -r "$ARG_FILE" ]]; then
    while read -r line
    do
	case $line in
	    *#*)
		# Comment, do nothing
		;;
	    --*)
		# Raw options
		RAW_ARGS="$RAW_ARGS $line"
		;;
	    *:*)
		# Volume mapping
 		VOLUME_ARGS="$VOLUME_ARGS -v $line"		
		;;
	    *=*)
		# Environment variable
		ENV_ARGS="$ENV_ARGS -e $line"
		;;
	esac    
    done < $ARG_FILE
fi

# Load user specified environment variables


# Some debug stuff

if [ "$debug" -eq 1 ]; then
    echo "image: $IMAGE"
    echo "container: $CONTAINER"
    echo "REMOVE: $REMOVE"
    echo "ARG_FILE: $ARG_FILE"
    echo "VOLUME_ARGS: $VOLUME_ARGS"
    echo "ENV_ARGS: $ENV_ARGS"
    echo "RAW_ARGS: $RAW_ARGS"    
    echo "command invocation: $command $@"
fi

# Get the status of the lrose_container.

container_status "$CONTAINER" status
print_msg $debug "status: $status"

cid="${status%:*}"	 # everything before the :
cstatus="${status##*:}"  # everything after the :
cstatus="${cstatus%% *}" # Only keep the first word

print_msg $debug "id: '$cid', status: '$cstatus'"

# Set up some docker options for the different state the container could be in

docker_display_opts="$DISPLAY_OPT -v /tmp/.X11-unix:/tmp/.X11-unix:rw -v $HOME/.Xauthority:/home/lrose/.Xauthority"
docker_run_opts="-t --name $CONTAINER -u $my_uid:$my_gid -w $HOME $ENV_ARGS $RAW_ARGS"
docker_exec_opts="-t -u $my_uid:$my_gid -w $HOME $ENV_ARGS"

docker_volume_opts=""

# Run the command in a container.

case "$cstatus" in
    Up)
	print_msg $debug "Container is up and running"
	run_cmd $debug $run_flag docker exec $docker_exec_opts $CONTAINER $command "$@"
	;;
    Exited)
	print_msg $debug "Container exited. Restarting it"
	run_cmd $debug $run_flag docker start "$CONTAINER"
	run_cmd $debug $run_flag docker exec $docker_exec_opts $CONTAINER $command "$@"
	;;
    Created)
	echo "Removing existing container '$CONTAINER' that failed to run..."
	docker rm "$CONTAINER"
	print_msg $debug "Starting container"
	run_cmd $debug $run_flag \
		docker run $REMOVE $VOLUME_ARGS $docker_display_opts \
		$docker_run_opts $IMAGE $command "$@"
	;;
    *)
	if [ ! -z "$cstatus" ]; then
	    echo "Container '$CONTAINER' status not recognized '$cstatus'"
	    exit 1
	fi
	print_msg $debug "Container doesn't exist. Starting one"
	run_cmd $debug $run_flag \
		docker run $REMOVE $VOLUME_ARGS $docker_display_opts \
		$docker_run_opts $IMAGE $command "$@"
	;;
esac

exit 0
